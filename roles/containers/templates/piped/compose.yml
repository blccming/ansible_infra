---
services:
  pipedfrontend:
    image: 1337kavin/piped-frontend:latest
    restart: unless-stopped
    depends_on:
      - piped
    container_name: piped_frontend
    entrypoint: ash -c 'sed -i s/pipedapi.kavin.rocks/pipedapi.{{ domain_local }}/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g "daemon off;"'
  piped-proxy:
    image: 1337kavin/piped-proxy:latest
    restart: unless-stopped
    environment:
      - UDS=1
    volumes:
      - piped-proxy:/app/socket
    container_name: piped-proxy
  piped:
    image: 1337kavin/piped:latest
    restart: unless-stopped
    volumes:
      - "{{ docker_dir }}/piped/config/config.properties:/app/config.properties:ro"
    depends_on:
      - postgres
    container_name: piped_backend
  nginx:
    image: nginx:mainline-alpine
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - "{{ docker_dir }}/piped/config/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "{{ docker_dir }}/piped/config/pipedapi.conf:/etc/nginx/conf.d/pipedapi.conf:ro"
      - "{{ docker_dir }}/piped/config/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro"
      - "{{ docker_dir }}/piped/config/pipedfrontend.conf:/etc/nginx/conf.d/pipedfrontend.conf:ro"
      - "{{ docker_dir }}/piped/config/ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro"
      - piped-proxy:/var/run/ytproxy
    container_name: piped_nginx
    depends_on:
      - piped
      - piped-proxy
      - pipedfrontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.piped.rule=Host(`piped.{{ domain_local }}`, `pipedapi.{{ domain_local }}`, `pipedproxy.{{ domain_local }}`)"
      - "traefik.http.routers.piped.entrypoints=websecure"
      - "traefik.http.services.piped.loadbalancer.server.port=8081"
  postgres:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - "{{ docker_dir }}/piped/data/db:/var/lib/postgresql/data"
    environment:
      - POSTGRES_DB=piped
      - POSTGRES_USER=piped
      - POSTGRES_PASSWORD={{ piped_postgres_password }}
    container_name: piped_postgres
  watchtower:
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
    container_name: piped_watchtower
    command: piped_frontend piped_backend piped_proxy varnish piped_nginx piped_postgres piped_watchtower
volumes:
  piped-proxy: null

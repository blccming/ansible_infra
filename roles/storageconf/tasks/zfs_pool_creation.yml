---
- name: Gather disk information
  command: lsblk -o WWN,NAME -n
  register: disk_info
  changed_when: false

- name: Initialize disk mapping
  set_fact:
    disk_mapping: []

- name: Set disk WWNs and device names as facts
  set_fact:
    disk_mapping: "{{ disk_mapping + [ {'wwn': item[0], 'device': '/dev/' + item[1]} ] }}"
  loop: "{{ disk_info.stdout_lines | map('split') | list }}"
  when: item | length == 2 and item[0] not in disk_mapping | map(attribute='wwn') | list

- name: Remove duplicates based on WWN
  set_fact:
    disk_mapping: "{{ disk_mapping | unique(attribute='wwn') }}"

# Formatting user confirmation
- name: Set formatting_allowed to false
  set_fact:
    formatting_allowed: false

- name: Set do_overwrite to false
  set_fact:
    do_overwrite: false

- name: Filter disk_config
  set_fact:
    filtered_disk_config: >-
      {{
        disk_config | selectattr('wwn', 'in', disk_mapping | map(attribute='wwn') | list) | list
      }}

- name: Ask for formatting permission
  pause:
    prompt: "WARNING: DATA LOSS.\nThe following disks will be formatted with ZFS {{ filtered_disk_config }}.\nIf you want to modify them, change the configuration in group_vars. Proceed? (y/n):"
  register: allow_formatting_user_input

- name: Change formatting_allowed to true if user input is 'y'
  set_fact:
    formatting_allowed: "{{ allow_formatting_user_input.user_input | lower == 'y' }}"

# Do overwrite
- name: Ask user for overwriting permission
  when: formatting_allowed
  block:
    - name: Send request
      pause:
        prompt: "WARNING: DATA LOSS.\nDo you want to overwrite these disks before formatting (y/n)?"
      register: do_overwrite_user_input

    - name: Change do_overwrite to true if user input is 'y'
      set_fact:
        do_overwrite: "{{ do_overwrite_user_input.user_input | lower == 'y' }}"

- name: Overwriting disks
  when: do_overwrite and formatting_allowed
  block:
    - name: Overwriting the disks with /dev/urandom
      command: "dd if=/dev/urandom of={{ item.device }} bs=1M status=progress"
      loop: "{{ disk_mapping }}"
      when: item.wwn in disk_config | map(attribute='wwn') | list
      changed_when: false

- name: Create ZFS pools (RAID-Z)
  when: formatting_allowed
  block:
    - name: Create keyfile directory
      file:
        path: "/etc/zfs_keys"
        state: directory
        mode: "0600"

    - name: Create keyfile
      copy:
        dest: "/etc/zfs_keys/keyfile"
        content: "{{ zfs_encryption_key }}"
        owner: root
        group: root
        mode: "0600"

    - name: Create ZFS pools
      command: >-
        zpool create
        -o ashift={{ '12' if item.type == 'hdd' else '9' }}
        -O compression=lz4
        -O recordsize={{ '1M' if 'media' in item.name else '128K' }}
        -O acltype=posixacl
        -O dnodesize=auto
        -O relatime=on
        -O mountpoint=none
        -O encryption=aes-256-gcm
        -O keylocation=file:///etc/zfs_keys/keyfile
        -O keyformat=raw
        {{ item.name }}
        /dev/disk/by-id/{{ 'wwn-' if item.type == 'hdd' else 'nvme-' }}{{ item.wwn }}
      loop: "{{ disk_config }}"
      when: item.wwn in disk_mapping | map(attribute='wwn') | list
      changed_when: false

    - name: Create mount points
      file:
        path: "{{ item.mountpoint }}"
        state: directory
        mode: "0755"
      loop: "{{ disk_config }}"

    - name: Create ZFS datasets and mount them
      community.general.zfs:
        name: "{{ item.name }}/{{ item.name }}_data"
        extra_zfs_properties:
          mountpoint: "{{ item.mountpoint }}"
        state: present
      loop: "{{ disk_config }}"
      when: item.wwn in disk_mapping | map(attribute='wwn') | list

    - name: Get zpool status
      command: zpool status
      register: zpool_status
      changed_when: false

    - name: Show zpool status
      debug:
        var: zpool_status

# Formatting cancelled
- name: Display formatting not proceeding
  debug:
    msg: "No disks will be formatted."
  when: not formatting_allowed
